{"version":3,"sources":["Card.js","Scroll.js","Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","allUser","this","user","map","key","id","src","name","email","React","Component","Scroll","style","overflowY","height","border","children","Searchbox","type","placeholder","onChange","handleChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","filterUser","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gLA4BeA,E,kDAxBX,WAAYC,GAAO,uCACTA,G,qDAIN,IAAMC,EAAUC,KAAKF,MAAMG,KAAKC,KAAI,SAAAD,GAChC,OACI,yBAAKE,IAAKF,EAAKG,IACX,yBAAKC,IAAG,+BAA0BJ,EAAKG,MACvC,4BAAKH,EAAKK,MACV,4BAAKL,EAAKM,WAKxB,OACI,6BACOR,O,GAlBES,IAAMC,WCQVC,EATA,SAACZ,GACZ,OACI,yBAAKa,MAAO,CAACC,UAAU,SAASC,OAAO,QAASC,OAAO,oBAClDhB,EAAMiB,WCgBJC,E,kDAlBX,WAAYlB,GAAO,uCACTA,G,qDAIN,OACI,6BACI,2BAAOmB,KAAK,OACZC,YAAY,gBACZC,SAAUnB,KAAKF,MAAMsB,oB,GAVbZ,IAAMC,WC+CfY,E,kDA3Cb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IAeVsB,aAAe,SAACE,GACd,EAAKC,SAAU,CACbC,YAAaF,EAAMG,OAAOC,SAhB1B,EAAKC,MAAQ,CACX1B,KAAM,GACNuB,YAAa,IAJC,E,gEAUA,IAAD,OACjBI,MAAM,8CACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKR,SAAS,CAACtB,KAAK8B,S,+BAQvB,IAAD,OACAC,EAAahC,KAAK2B,MAAM1B,KAAKgC,QAAO,SAAAhC,GACxC,OAAOA,EAAKK,KAAK4B,cAAcC,SAAS,EAAKR,MAAMH,YAAYU,kBAK/D,OACE,6BACE,kBAAC,EAAD,CAAWd,aAAcpB,KAAKoB,eAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMnB,KAAM+B,U,GAjCNxB,IAAMC,WCOJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e587b14.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Card extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    render(){\n\n        const allUser = this.props.user.map(user => {\n            return(\n                <div key={user.id}>\n                    <img src={`https://robohash.org/${user.id}`}/>\n                    <h1>{user.name}</h1>\n                    <h1>{user.email}</h1>\n                </div>\n                )\n        })\n\n      return(\n          <div>\n                {allUser} \n                \n          </div>\n      )\n  }\n}\n\nexport default Card","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY:\"scroll\",height:\"700px\", border:\"2px solid black\"}}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll;","import React from 'react';\n\nclass Searchbox extends React.Component{\n    constructor(props){\n        super(props)\n    }\n   \n    render(){\n        return(\n            <div>\n                <input type=\"text\" \n                placeholder=\"search robots\" \n                onChange={this.props.handleChange}\n                ></input>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Searchbox;","import React from 'react';\nimport Card from './Card.js';\nimport Scroll from './Scroll.js'\nimport Searchbox from './Searchbox.js';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      user: [ ],\n      searchField: '',\n    }\n    \n    }\n\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n.then(response => response.json())\n.then(json => this.setState({user:json}))\n}\n \nhandleChange = (event) => {\n  this.setState(({\n    searchField: event.target.value\n  }))\n}\n  render(){\n    const filterUser = this.state.user.filter(user =>{\n      return user.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n      \n    \n    })\n    \n      return(\n        <div>\n          <Searchbox handleChange={this.handleChange} />\n          <Scroll>\n            <Card user={filterUser}/>\n          </Scroll>\n          \n        </div>\n      )\n    }\n   \n  }\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}